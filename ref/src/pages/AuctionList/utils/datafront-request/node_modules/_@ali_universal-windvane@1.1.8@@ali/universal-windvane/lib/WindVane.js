'use strict';

exports.__esModule = true;
exports.default = void 0;

var _universalEnv = require('universal-env');

var WV = {};

WV.call = function(className, method, data, successCallback, failCallback) {
  if (_universalEnv.isWeex) {
    var Windvane;

    try {
      Windvane = require('@weex-module/windvane');
    } catch (e) {}

    if (Windvane && Windvane.call) {
      Windvane.call({
        class: className,
        method: method,
        data: data
      }, successCallback);
    } else {
      failCallback && failCallback({
        msg: '浏览器不支持 windvane',
        ret: ['HY_NOT_SUPPORT_DEVICE']
      });
    }
  } else if (typeof WindVane !== 'undefined' && WindVane.isAvailable) {
    WV.isAvailable = WindVane.isAvailable;
    WindVane.call(className, method, data, successCallback, failCallback);
  } else {
    // 失败
    failCallback && failCallback({
      msg: '浏览器不支持 windvane',
      ret: ['HY_NOT_SUPPORT_DEVICE']
    });
  }
};
/**
 * 调用 WindVane 提供的 JSBridge。
 * windvane.call2(name, params, successCallback, failureCallback)
 * call2
 * @param {String} name		              必填		要调用的 JSBridge 的名称，注意格式为 '类名.方法名'
 * @param {Object} params		            非必填  要调用的 JSBridge 的参数
 * @param {Function} successCallback		非必填  成功回调
 * @param {Function} failureCallback		非必填  失败回调
 * 参考文档： http://doc.weex.alibaba-inc.com/modules/windvane.html
 */


WV.call2 = function(name, params, successCallback, failCallback) {
  if (_universalEnv.isWeex) {
    var Windvane;

    try {
      Windvane = require('@weex-module/windvane');
    } catch (e) {}

    if (Windvane && Windvane.call2) {
      Windvane.call2(name, params, successCallback, failCallback);
    } else {
      failCallback && failCallback({
        msg: '浏览器不支持 windvane',
        ret: ['HY_NOT_SUPPORT_DEVICE']
      });
    }
  } else if (typeof WindVane !== 'undefined' && WindVane.isAvailable) {
    WV.isAvailable = WindVane.isAvailable; // FIXME: 需要 Web 端提供一样的 call2 方法

    if (WindVane && WindVane.call2) {
      WindVane.call2(name, params, successCallback, failCallback);
    } else {
      var nameList = name.split('.');
      WindVane.call(nameList[0], nameList[1], params, successCallback, failCallback);
    }
  } else {
    // 失败
    failCallback && failCallback({
      msg: '浏览器不支持 windvane',
      ret: ['HY_NOT_SUPPORT_DEVICE']
    });
  }
};

var _default = WV;
exports.default = _default;