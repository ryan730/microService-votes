const UrlObject = require('./url-parser');
const DEFAULT_APP_DIRNAME = 'default';

/**
 * @description url接口解析
 * @param apiConfig {Object} 接口配置信息
 * @param apiConfig.api {String} 接口URL地址
 * @param apiConfig.type {String} 接口类型
 * @param apiConfig.appId {Number} 接口所属应用ID（非必须）
 * @param apiConfig.dirName {String} 接口目录（非必须，默认default）
 * @param apiConfig.data {Object} 接口入参
 * @param apiConfig.requiredParams {Array} 接口必须入参 （可选，默认为空，为空认为所有参数为必须）
 * @returns {null | Object} 接口解析结果，如果接口配置无法解析，返回null
 */
function parseUrlApi(apiConfig) {
  const url = apiConfig.api;
  const type = apiConfig.type;
  const dirName = apiConfig.dirName || DEFAULT_APP_DIRNAME;
  let rules = {};
  if (url) {
    const urlObj = new UrlObject(url);
    // path
    let path = urlObj.host;
    if (urlObj.pathname !== '/') {
      path = path + urlObj.pathname;
    }
    path = dirName + '/' + type + '/' + path;
    rules.path = path;
    // params(filename)
    var params = {};
    urlObj.search.substr(1).replace(/(\w+)=(\w+)/ig, function(a, b, c) {
      params[b] = decodeURIComponent(c);
    });

    if (apiConfig.data) {
      for (var key in apiConfig.data) {
        params[key] = apiConfig.data[key];
      }
    }

    // apiConfig.data && (Object.assign(params, apiConfig.data));
    let paramsStr = parseParams(params, apiConfig.requiredParams);
    rules.params = paramsStr || undefined;
    // key
    rules.key = calculateKey(rules) || undefined;
  }
  return rules;
}

/**
 * @description 计算接口的Key值
 * 计算规则：将path 和 params（字母升序排列）中所有的数字和字母抽离出来，转换为小写，然后拼接为字符串
 * @param rules
 * @returns {string}
 */
function calculateKey(rules) {
  const { path, params } = rules;
  const file = params ? (path + '' + params) : path;
  const result = [];

  var keys = file.split('');
  for (var i = 0, len = keys.length; i < len; i++) {
    var charItem = keys[i];
    if ((charItem >= '0' && charItem <= '9') || (charItem <= 'z' && charItem >= 'a')) {
      result.push(charItem);
    } else if (charItem <= 'Z' && charItem >= 'A') {
      result.push(charItem.toLowerCase());
    }
  }

  return result.join('');
}

/**
 * @description 参数解析
 * @param params {Object} 接口配置入参
 * @param requires {Array} 用户配置的接口必须入参，可选参数，如不设置，则全部必选
 * @returns {string} 解析结果
 */
function parseParams(params, requires) {
  let result;

  if (params) {
    result = [];

    for (var key in params) {
      if (params.hasOwnProperty(key)) {
        if (!requires || requires.indexOf(key) > -1) {
          result.push(key + '-' + params[key]);
        }
      }
    }

    // const keys = Object.keys(params);
    result.sort();
    // keys.forEach(key => {
    //   if (!requires || requires.indexOf(key) > -1) {
    //     result.push(key + '-' + params[key]);
    //   }
    // });
  } else {
    result = [];
  }
  return result.join('_');
}

module.exports = {
  parse: parseUrlApi
};