import SPM from '@ali/universal-spm';
import { isWeex } from 'universal-env';
import { versionCompare } from '@ali/universal-pm-common-base';
import md5 from 'js-md5';

const REGX = /^([^?]+)(\?[^#]+)?(#.*)?/;

const MAX_PATH_DEPTH = 20;

function readCookie(name) {
  if (isWeex) {
    let nick = '';
    let cookie;
    if (versionCompare('7.0.0', navigator.appVersion) > 0) { // 低于 7.0.0 的版本直接 return ''
      return nick;
    }
    try {
      cookie = require('@weex-module/cookie');
    } catch (ex) { }
    if (cookie && typeof cookie.getAllObjects === 'function') {
      // XXX: 目前 cookie 在小程序获取方式不一致，现在暂无使用到，因此简单用 [] 来兼容
      const pairs = cookie.getAllObjects() || [];
      for (let i = 0; i < pairs.length; i++) {
        if (pairs[i].name === name) nick = pairs[i].value;
      }
    }
    return nick;
  } else {
    const matched = new RegExp('(?:^|;\\s*)' + name + '\\=([^;]+)(?:;\\s*|$)').exec(document.cookie);
    if (matched) {
      return matched[1];
    } else {
      return undefined;
    }
  }
}

function getUserNick({ escape = true } = {}) {
  let nick = '';
  const tbnick = readCookie('_nk_');
  if (tbnick && tbnick.length > 0 && tbnick !== 'null') {
    if (escape) nick = unescape(unescape(tbnick).replace(/\\u/g, '%u'));
    else nick = tbnick;
  }
  nick = nick.replace(/\</g, '&lt;').replace(/\>/g, '&gt;');
  return nick;
}

const random = n => Math.random().toString().substr(2, n);

const USER_NICK = getUserNick({ escape: false });

const PVID = md5(USER_NICK || random(10)) + '_' + (+new Date);

const SEARCH_PARAMS = new URLSearchParams(location.search);

const getScm = ({ spmc = '0', spmd = '0', ab = '0', crowd = '0', cs = '0' }) => `20140647.${crowd}.${cs}.${ab}.${SPM.getPageSPM()[1]}.${spmc}.${spmd}`;

const getPath = ({ path }) => {
  const spmbs = path ? path.split(',') : [];
  const spmb = SPM.getPageSPM()[1];
  const idx = spmbs.indexOf(spmb);

  if (idx > -1) {
    spmbs.length = idx + 1;
  } else {
    spmbs.push(spmb);
  }

  spmbs.length = Math.min(spmbs.length, MAX_PATH_DEPTH);

  return spmbs.join(',');
};

const createTrackParams = ({ spmc, spmd, crowd, cs, ab, canBeOrigin = true } = {}) => {
  let pvid = SEARCH_PARAMS.get('pvid');
  let scm = SEARCH_PARAMS.get('scm');
  let path = SEARCH_PARAMS.get('path');

  path = getPath({ path });

  if (pvid && scm) {
    return { pvid, scm, path };
  }

  if (canBeOrigin) {
    return {
      pvid: PVID,
      scm: getScm({ spmc, spmd, crowd, cs, ab }),
      path,
    };
  }

  return {};
};

const createTrackSearch = opts => {
  const params = createTrackParams(opts);
  const pairs = [];

  for (const key in params) {
    if (params.hasOwnProperty(key)) {
      pairs.push(`${key}=${params[key]}`);
    }
  }

  return pairs.join('&');
};

const createTrackUrl = ({ url, spmc, spmd, crowd, cs, ab }) => {
  if (!url) return url;

  const r = REGX.exec(url);

  if (!r) return url;

  const [, hrefNoSearch = '', search = '', hash = ''] = r;

  const searchParams = new URLSearchParams(search);
  let urlPvid = searchParams.get('pvid');
  let urlScm = searchParams.get('scm');
  let locationPvid = SEARCH_PARAMS.get('pvid');
  let locationScm = SEARCH_PARAMS.get('scm');
  let locationOldScm = SEARCH_PARAMS.get('oldscm');
  let locationPath = SEARCH_PARAMS.get('path');

  if (!urlPvid) {
    const pvid = locationPvid || PVID;
    searchParams.set('pvid', pvid);
  }

  if (locationPvid && locationScm) {
    searchParams.set('scm', locationScm);
    const oldscm = locationOldScm || urlScm;
    if (oldscm) searchParams.set('oldscm', oldscm);
  } else {
    searchParams.set('scm', getScm({ spmc, spmd, crowd, cs, ab }));
    const oldscm = locationScm || locationOldScm || urlScm;
    if (oldscm) searchParams.set('oldscm', oldscm);
  }

  const path = getPath({ path: locationPath });
  searchParams.set('path', path);

  return `${hrefNoSearch}?${searchParams.toString()}${hash}`;
};

const createTrackUrlWithSpm = ({ url, spmc, spmd, crowd, cs, ab }) => {
  return `${createTrackUrl({ url, spmc, spmd, crowd, cs, ab })}&${SPM.getSPMQueryString(spmc, spmd)}`;
};

export default { createTrackParams, createTrackSearch, createTrackUrl, createTrackUrlWithSpm };
